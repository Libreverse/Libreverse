## Module loading handled via /etc/nginx/modules-enabled/*.conf

# Load any distro-provided modules (must be in main context so load_module directives are valid)
include /etc/nginx/modules-enabled/*.conf;

# Allow main-context drop-ins (e.g., env VAR directives)
include /etc/nginx/main.d/*.conf;

user www-data;
worker_processes auto;
worker_rlimit_nofile 40000;
worker_priority -5;
pid /run/nginx.pid;
events {
	worker_connections 8096;
	accept_mutex on;
	multi_accept on;
    use epoll;
}
daemon off;
http {
    # 2gb max body size
    client_max_body_size 2g;

	# Buffer sizing for headers/body; adjust to match traffic patterns
	client_body_buffer_size   16k;
	client_header_buffer_size 4k;
	large_client_header_buffers 4 8k;
	# Store large request bodies on disk instead of memory
	client_body_temp_path /home/app/webapp/tmp/nginx_body 2 2;

	# Performance: AIO threads for disk I/O, connection handling defaults
	aio threads;

	# TCP optimizations
	sendfile on;
	tcp_nopush on;
	tcp_nodelay on;
	keepalive_timeout 15;
	keepalive_requests 100;
	client_body_timeout 12s;
	client_header_timeout 12s;
	send_timeout 10s;

	# Define a unique access log format to avoid clashes with base configs
	log_format libreverse_main '$remote_addr - $remote_user [$time_local] "$request" '
					'$status $body_bytes_sent "$http_referer" '
					'"$http_user_agent" "$request_time"';

	# Passenger settings are provided by distro config (e.g., /etc/nginx/conf.d/mod-http-passenger.conf).
	# Do not set passenger_root/passenger_ruby here to avoid duplicate directive errors.
	# Include upstream passenger config if present
	include /etc/nginx/passenger.conf;

	# Allow dropping in runtime-generated tuning (created by entrypoint)
	include /etc/nginx/conf.d/*.conf;
	include       /etc/nginx/mime.types;
	default_type  application/octet-stream;

	# Open file cache to reduce fs lookups for frequently accessed files
	open_file_cache max=2000 inactive=20s;
	open_file_cache_valid 60s;
	open_file_cache_min_uses 5;

	# Proxy buffers (useful when proxying some paths; harmless if unused)
	proxy_buffer_size 128k;
	proxy_buffers 100 128k;

	# Compression handled by app; disable Nginx gzip to prevent double-compression
	gzip off;
	# gzip_comp_level 5;
	# gzip_min_length 1024;
	# gzip_vary on;
	# gzip_proxied any;
	# gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript application/xhtml+xml image/svg+xml;

	# Log format can be adjusted if needed for ModSecurity audit correlation
	# Send logs to container stdout/stderr for unified logging
	access_log /dev/stdout libreverse_main buffer=16k;
	error_log  /dev/stderr warn;

	init_by_lua_block {
		-- Ensure CrowdSec lua modules are discoverable without using lua_package_path (avoids duplicate directive)
		local custom = '/usr/local/lua/crowdsec/?.lua'
		if not string.find(package.path, custom, 1, true) then
		  package.path = custom .. ';' .. package.path
		end

		cs = require "crowdsec"
		local ok, err = cs.init("/etc/crowdsec/bouncers/crowdsec-nginx-bouncer.conf", "crowdsec-nginx-bouncer/v1.1.3")
		if ok == nil then
			ngx.log(ngx.ERR, "[Crowdsec] " .. err)
			error()
		end
		ngx.log(ngx.ALERT, "[Crowdsec] Initialisation done")
	}

	# Removed duplicate map for $unix; rely on base config if present

	init_worker_by_lua_block {
		cs = require "crowdsec"
		local mode = cs.get_mode()
		if string.lower(mode) == "stream" then
		   ngx.log(ngx.INFO, "Initializing stream mode for worker " .. tostring(ngx.worker.id()))
		   cs.SetupStream()
		end

		if ngx.worker.id() == 0 then
		   ngx.log(ngx.INFO, "Initializing metrics for worker " .. tostring(ngx.worker.id()))
		   cs.SetupMetrics()
		end
	}

	include /etc/nginx/sites-enabled/*;
}
