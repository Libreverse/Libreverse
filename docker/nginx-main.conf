## Module loading handled via /etc/nginx/modules-enabled/*.conf

# Load any distro-provided modules (must be in main context so load_module directives are valid)
include /etc/nginx/modules-enabled/*.conf;

# Allow main-context drop-ins (e.g., env VAR directives)
include /etc/nginx/main.d/*.conf;

user www-data;
worker_processes auto;
pid /run/nginx.pid;
events {
	worker_connections 1024;
	# Connection handling behavior
	accept_mutex off;
	multi_accept on;
}
daemon off;
http {
    # 2gb max body size
    client_max_body_size 2g;

	# Performance: AIO threads for disk I/O, connection handling defaults
	log_format main '$remote_addr - $remote_user [$time_local] "$request" '
					'$status $body_bytes_sent "$http_referer" '
					'"$http_user_agent" "$request_time"';

	aio threads;

	# Passenger core settings (minimal). If the base image ships a passenger.conf, include it.
	passenger_root /usr/lib/ruby/vendor_ruby/phusion_passenger/locations.ini;
	passenger_ruby /usr/bin/ruby3.4;
	# Include upstream passenger config if present (won't error if missing if using wildcard include pattern)
	include /etc/nginx/passenger.conf; # ignore if absent

	# Allow dropping in runtime-generated tuning (created by entrypoint)
	include /etc/nginx/conf.d/*.conf;
	include       /etc/nginx/mime.types;
	default_type  application/octet-stream;
	sendfile        on;
	keepalive_timeout  65;
	# Log format can be adjusted if needed for ModSecurity audit correlation
	access_log /var/log/nginx/access.log main buffer=16k;
	error_log  /var/log/nginx/error.log warn;

	# CrowdSec NGINX bouncer (lua) wiring
	lua_package_path '/usr/local/lua/crowdsec/?.lua;;';
	lua_shared_dict crowdsec_cache 50m; # do not rename this dict
	lua_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;

	init_by_lua_block {
		cs = require "crowdsec"
		local ok, err = cs.init("/etc/crowdsec/bouncers/crowdsec-nginx-bouncer.conf", "crowdsec-nginx-bouncer/v1.1.3")
		if ok == nil then
			ngx.log(ngx.ERR, "[Crowdsec] " .. err)
			error()
		end
		ngx.log(ngx.ALERT, "[Crowdsec] Initialisation done")
	}

	map $server_addr $unix {
		default 0;
		"~unix:" 1;
	}

	init_worker_by_lua_block {
		cs = require "crowdsec"
		local mode = cs.get_mode()
		if string.lower(mode) == "stream" then
		   ngx.log(ngx.INFO, "Initializing stream mode for worker " .. tostring(ngx.worker.id()))
		   cs.SetupStream()
		end

		if ngx.worker.id() == 0 then
		   ngx.log(ngx.INFO, "Initializing metrics for worker " .. tostring(ngx.worker.id()))
		   cs.SetupMetrics()
		end
	}

	include /etc/nginx/sites-enabled/*;
}
