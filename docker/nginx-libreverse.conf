# Libreverse supplemental Nginx configuration (loaded after base nginx.conf)
# Keep this minimal to avoid duplicate directives with the upstream image.

# Increase client body size for large uploads
client_max_body_size 2g;

# Unique log format to avoid conflicting with any existing 'main'
log_format libreverse_main '$remote_addr - $remote_user [$time_local] "$request" '
                           '$status $body_bytes_sent "$http_referer" '
                           '"$http_user_agent" "$request_time"';
access_log /var/log/nginx/access.log libreverse_main buffer=16k;

# (Dynamic passenger_pre_start is injected at runtime by entrypoint script; omit static directive here)

# Load Passenger supplemental config if present
include /etc/nginx/passenger.conf;

# CrowdSec Lua bouncer bootstrap (avoid duplicate global directives)
init_by_lua_block {
  local custom = '/usr/local/lua/crowdsec/?.lua'
  if not string.find(package.path, custom, 1, true) then
    package.path = custom .. ';' .. package.path
  end
  cs = require 'crowdsec'
  local ok, err = cs.init('/etc/crowdsec/bouncers/crowdsec-nginx-bouncer.conf', 'crowdsec-nginx-bouncer/v1.1.3')
  if ok == nil then
    ngx.log(ngx.ERR, '[Crowdsec] ' .. err)
    error()
  end
  ngx.log(ngx.ALERT, '[Crowdsec] Initialisation done')
}

init_worker_by_lua_block {
  cs = require 'crowdsec'
  local mode = cs.get_mode()
  if string.lower(mode) == 'stream' then
    ngx.log(ngx.INFO, 'Initializing stream mode for worker ' .. tostring(ngx.worker.id()))
    cs.SetupStream()
  end
  if ngx.worker.id() == 0 then
    ngx.log(ngx.INFO, 'Initializing metrics for worker ' .. tostring(ngx.worker.id()))
    cs.SetupMetrics()
  end
}

# Site configs (already copied in Dockerfile)
# (This include may already exist in base; harmless if duplicated)
include /etc/nginx/sites-enabled/*;
