#!/usr/bin/env ruby
# frozen_string_literal: true

# Email Automation Script for Libreverse
# This script demonstrates how to hook into the email system to send automated emails
# for searching and requesting experience files

require 'net/smtp'
require 'mail'

class LibreverseEmailBot
  attr_reader :smtp_host, :smtp_port, :smtp_username, :smtp_password, :from_email, :instance_domain

  def initialize(options = {})
    @smtp_host = options[:smtp_host] || ENV['SMTP_HOST'] || 'localhost'
    @smtp_port = options[:smtp_port] || ENV['SMTP_PORT'] || 587
    @smtp_username = options[:smtp_username] || ENV['SMTP_USERNAME']
    @smtp_password = options[:smtp_password] || ENV['SMTP_PASSWORD']
    @from_email = options[:from_email] || ENV['FROM_EMAIL'] || 'bot@example.com'
    @instance_domain = options[:instance_domain] || ENV['LIBREVERSE_DOMAIN'] || 'localhost:3000'

    configure_mail
  end

  # Send an email to search for experiences containing "space"
  def send_space_search_email
    puts "üìß Sending search email for 'space'..."

    mail = Mail.new do
      from     @from_email
      to       "search@#{@instance_domain}"
      subject  "space exploration"
      body     build_search_email_body("space exploration", federated: false, limit: 10)
    end

    send_email(mail)
    puts "‚úÖ Search email sent successfully!"
  end

  # Send an email to request the Meditation and Mindfulness Space experience
  def send_meditation_experience_request
    puts "üìß Sending experience request for 'Meditation and Mindfulness Space'..."

    mail = Mail.new do
      from     @from_email
      to       "experiences@#{@instance_domain}"
      subject  "Meditation and Mindfulness Space"
      body     build_experience_request_body("Meditation and Mindfulness Space")
    end

    send_email(mail)
    puts "‚úÖ Experience request email sent successfully!"
  end

  # Send both emails in sequence
  def send_automated_emails
    puts "ü§ñ Starting automated email sequence..."
    puts "=" * 50

    begin
      # First, search for space-related experiences
      send_space_search_email

      # Wait a moment between emails
      sleep(2)

      # Then request the meditation experience
      send_meditation_experience_request

      puts "=" * 50
      puts "‚úÖ All emails sent successfully!"
      puts "üì¨ Check your email for responses from the Libreverse instance."
    rescue StandardError => e
      puts "‚ùå Error sending emails: #{e.message}"
      puts "   Please check your SMTP configuration and try again."
    end
  end

  # Send a custom search email
  def send_custom_search(query, options = {})
    puts "üìß Sending custom search for '#{query}'..."

    mail = Mail.new do
      from     @from_email
      to       "search@#{@instance_domain}"
      subject  query
      body     build_search_email_body(query, options)
    end

    send_email(mail)
    puts "‚úÖ Custom search email sent!"
  end

  # Send a custom experience request
  def send_custom_experience_request(experience_title)
    puts "üìß Sending experience request for '#{experience_title}'..."

    mail = Mail.new do
      from     @from_email
      to       "experiences@#{@instance_domain}"
      subject  experience_title
      body     build_experience_request_body(experience_title)
    end

    send_email(mail)
    puts "‚úÖ Experience request sent!"
  end

  private

  def configure_mail
    Mail.defaults do
      delivery_method :smtp, {
        address: @smtp_host,
        port: @smtp_port,
        user_name: @smtp_username,
        password: @smtp_password,
        authentication: :plain,
        enable_starttls_auto: true
      }
    end
  end

  def send_email(mail)
    if rails_environment?
      # If running in Rails environment, use ActionMailbox to process directly
      puts "üîÑ Processing email through ActionMailbox..."
      ActionMailbox::InboundEmail.create_and_extract_message_id!(mail.to_s)
    else
      # Send via SMTP
      mail.deliver!
    end
  end

  def rails_environment?
    defined?(Rails) && Rails.respond_to?(:application)
  end

  def build_search_email_body(query, options = {})
    federated = options[:federated] || false
    limit = options[:limit] || 20
    format = options[:format] || 'links'

    body = <<~EMAIL
      #{query}

      --federated: #{federated}
      --limit: #{limit}
      --format: #{format}

      ---
      Automated search request
      Generated by Libreverse Email Bot
    EMAIL

    body.strip
  end

  def build_experience_request_body(experience_title)
    body = <<~EMAIL
      #{experience_title}

      ---
      Automated experience request
      Please send the offline version of this experience.
      Generated by Libreverse Email Bot
    EMAIL

    body.strip
  end
end

# CLI Interface
class EmailBotCLI
  def self.run(args = ARGV)
    bot = LibreverseEmailBot.new

    case args[0]&.downcase
    when 'search'
      query = args[1..].join(' ')
      if query.empty?
        puts "‚ùå Please provide a search query"
        puts "Usage: ruby email_automation_script.rb search <query>"
        exit 1
      end
      bot.send_custom_search(query)

    when 'experience', 'exp'
      title = args[1..].join(' ')
      if title.empty?
        puts "‚ùå Please provide an experience title"
        puts "Usage: ruby email_automation_script.rb experience <title>"
        exit 1
      end
      bot.send_custom_experience_request(title)

    when 'auto', 'both'
      bot.send_automated_emails

    when 'space'
      bot.send_space_search_email

    when 'meditation'
      bot.send_meditation_experience_request

    when 'help', '-h', '--help', nil
      show_help

    else
      puts "‚ùå Unknown command: #{args[0]}"
      show_help
      exit 1
    end
  end

  def self.show_help
    puts <<~HELP
      ü§ñ Libreverse Email Bot - Automated Email Interface

      USAGE:
        ruby email_automation_script.rb <command> [arguments]

      COMMANDS:
        auto                    Send both space search and meditation request
        space                   Send search email for space-related experiences
        meditation              Request Meditation and Mindfulness Space experience
        search <query>          Send custom search email
        experience <title>      Request specific experience by title
        help                    Show this help message

      EXAMPLES:
        ruby email_automation_script.rb auto
        ruby email_automation_script.rb search "machine learning"
        ruby email_automation_script.rb experience "Space Exploration"

      ENVIRONMENT VARIABLES:
        SMTP_HOST              SMTP server hostname (default: localhost)
        SMTP_PORT              SMTP server port (default: 587)
        SMTP_USERNAME          SMTP authentication username
        SMTP_PASSWORD          SMTP authentication password
        FROM_EMAIL             Email address to send from
        LIBREVERSE_DOMAIN      Target Libreverse instance domain

      CONFIGURATION:
        Set your email configuration in environment variables or modify
        the script to use your preferred SMTP settings.

    HELP
  end
end

# Ruby script execution
EmailBotCLI.run(ARGV) if __FILE__ == $PROGRAM_NAME

# If running in Rails environment, also define a convenience class
if defined?(Rails)
  class LibreverseEmailAutomation
    def self.send_space_search
      bot = LibreverseEmailBot.new(
        instance_domain: LibreverseInstance.instance_domain,
        from_email: "automation@#{LibreverseInstance.instance_domain}"
      )
      bot.send_space_search_email
    end

    def self.send_meditation_request
      bot = LibreverseEmailBot.new(
        instance_domain: LibreverseInstance.instance_domain,
        from_email: "automation@#{LibreverseInstance.instance_domain}"
      )
      bot.send_meditation_experience_request
    end

    def self.run_automation
      bot = LibreverseEmailBot.new(
        instance_domain: LibreverseInstance.instance_domain,
        from_email: "automation@#{LibreverseInstance.instance_domain}"
      )
      bot.send_automated_emails
    end
  end
end
