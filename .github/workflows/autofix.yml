name: Autofix (formatters and linters)

on:
  pull_request:
    branches: [ "main" ]
  push:
    branches: [ "main" ]

permissions:
  contents: write

concurrency:
  group: autofix-${{ github.event.pull_request.number || github.ref_name }}
  cancel-in-progress: true

jobs:
  autofix:
    name: Apply autofixes to changed files
    runs-on: ubuntu-22.04
    # Allow PRs from same repo, and direct pushes, but avoid loops from bot commits and skip autofix commits
    if: >
      (
        github.event_name == 'pull_request' &&
        github.event.pull_request.head.repo.full_name == github.repository
      ) || (
        github.event_name == 'push' &&
        github.actor != 'github-actions[bot]' &&
        !contains(github.event.head_commit.message, 'chore(autofix)')
      )
    steps:
      - name: Check out code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          fetch-depth: 0

      - name: Setup Environment
        uses: ./.github/actions/setup-environment

      - name: Determine changed files
        id: changes
        shell: bash
        run: |
          set -euo pipefail
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BASE_REF="${{ github.base_ref }}"
            git fetch origin "$BASE_REF" --depth=1
            git diff --name-only --diff-filter=ACMR "origin/${BASE_REF}...HEAD" > changed_files.txt
          else
            BEFORE="${{ github.event.before }}"
            AFTER="${{ github.sha }}"
            if [ -z "$BEFORE" ]; then
              # Fallback to last commit if BEFORE is unavailable
              BEFORE=$(git rev-parse HEAD~1 || echo "")
            fi
            if [ -n "$BEFORE" ]; then
              git diff --name-only --diff-filter=ACMR "$BEFORE" "$AFTER" > changed_files.txt
            else
              git diff --name-only --diff-filter=ACMR "$AFTER~1" "$AFTER" > changed_files.txt
            fi
          fi
          echo "Changed files:" && cat changed_files.txt || true

      - name: Run formatters/linters on changed files
        if: always()
        continue-on-error: true
        shell: bash
        run: |
          # Don't stop on individual tool failures; apply what we can
          set +e
          set -u
          # Filter out paths we never want to touch
          grep -vE '^(vendor/|node_modules/|\.codeql/|coverage/|log/|tmp/|storage/|public/assets/)' changed_files.txt > changed_files_filtered.txt || true
          mv changed_files_filtered.txt changed_files.txt
          echo "Changed source files:" && cat changed_files.txt || true

          # Helper to run a tool only when matching files exist
          run_if_any() {
            pattern="$1"; shift
            mapfile -t files < <(grep -E "$pattern" changed_files.txt || true)
            echo "Pattern: $pattern => ${#files[@]} match(es)"
            if [ ${#files[@]} -gt 0 ]; then
              echo "Running: $* on ${#files[@]} files"
              printf '%s\0' "${files[@]}" | xargs -0 -r $@ || true
            else
              echo "No files match pattern: $pattern"
            fi
          }

          command -v bun >/dev/null 2>&1 || { echo "bun not found"; exit 0; }

          # Prettier (via bun) – broad formatting set (adds shell & style extensions)
            run_if_any '\\.(json|md|ya?ml|html?|css|scss|sass|graphql|gql|mdx|sh|bash|zsh|env(\.example)?|env\.local)$' bun prettier --write --log-level warn
            # Dockerfiles (Prettier plugin sh handles these) – match Dockerfile variants
            run_if_any '(^|/)[Dd]ockerfile(\..*)?$' bun prettier --write --log-level warn

          # ESLint (via bun)

            # Coffeelint (autofix) – CoffeeScript
            if bun coffeelint --help >/dev/null 2>&1; then
              run_if_any '\\.(coffee)$' bun coffeelint --fix -f coffeelint.json
            fi
          run_if_any '\.(js|jsx|ts|tsx)$' bun eslint --fix

          # Stylelint (via bun) – style-specific lint autofixes
          run_if_any '\.(css|scss|sass)$' bun stylelint --fix

          # markdownlint (via bun)
          run_if_any '\.md$' bun markdownlint-cli2 --fix --config .markdownlint-cli2.jsonc

          # Rubocop
          if bundle exec rubocop -v >/dev/null 2>&1; then
            run_if_any '\.rb$' bash -lc 'xargs -0 -r bundle exec rubocop -A --force-exclusion || true'
          fi

          # Haml-lint
          if bundle exec haml-lint -v >/dev/null 2>&1; then
            run_if_any '\.(haml)$' bash -lc 'xargs -0 -r bundle exec haml-lint --auto-correct || true'
          fi

          # ERB formatter
          if bundle exec erb-format --help >/dev/null 2>&1; then
            run_if_any '\.(erb)$' bash -lc 'xargs -0 -r bundle exec erb-format --write || true'
          fi

          # ERB Lint autocorrect
          if bundle exec erblint --version >/dev/null 2>&1; then
            run_if_any '\.(erb)$' bash -lc 'xargs -0 -r bundle exec erblint -a --config .erb-lint.yml || true'
          fi

          # Typos (if available) – spelling corrections
          if command -v typos >/dev/null 2>&1; then
            run_if_any '.*' bash -lc 'xargs -0 -r typos -w || true'
          fi

          # i18n-tasks normalize – reorder & dedupe locale YAML when they changed
          if bundle exec i18n-tasks --version >/dev/null 2>&1; then
            mapfile -t locale_changes < <(grep -E '^config/locales/.*\.ya?ml$' changed_files.txt || true)
            if [ ${#locale_changes[@]} -gt 0 ]; then
              echo "Normalizing i18n locale files"
              bundle exec i18n-tasks normalize -p || true
            fi
          fi

          # Fallback: NUL-safe Prettier across all changed files (ignore unknown types)
          if [ -s changed_files.txt ]; then
            tr '\n' '\0' < changed_files.txt | xargs -0 -r bun prettier --write --log-level warn --ignore-unknown || true
          fi

      - name: Rebase on latest branch to minimize conflicts
        shell: bash
        run: |
          set -euo pipefail
          BRANCH="${{ github.head_ref != '' && github.head_ref || github.ref_name }}"
          # Stash in case formatters left uncommitted changes
          git stash -u --quiet || true
          git fetch origin "$BRANCH" --depth=1 || true
          git pull --rebase origin "$BRANCH" || true
          git stash pop --quiet || true

      - name: Commit and push changes (if any)
        if: always()
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore(autofix): apply automated format/lint fixes"
          branch: ${{ github.head_ref || github.ref_name }}
          commit_user_name: github-actions[bot]
          commit_user_email: 41898282+github-actions[bot]@users.noreply.github.com
          push_options: '--force-with-lease'
          skip_fetch: false
          file_pattern: |
            app/**
            config/**
            lib/**
            public/**
            scripts/**
            spec/**
            test/**
            .github/**
            Gemfile
            Gemfile.lock
            package.json
            bun.lock*
            eslint.config.js
            stylelint.config.js
            prettier.config.js
            .erb-lint.yml
            .erb-formaterrc.json
