name: CI/CD Pipeline

# Restrict workflow permissions for security
permissions:
    contents: read
    security-events: write
    actions: read

on:
    push:
        branches:
            - "main"
    pull_request:
        branches:
            - "main"

jobs:
    # Code formatting tools (runs in parallel)
    formatting:
        name: ${{ matrix.tool }}
        runs-on: ubuntu-22.04
        if: always()
        permissions:
            contents: read
        strategy:
            fail-fast: false
            matrix:
                tool:
                    [
                        prettier,
                        rubocop,
                        haml-lint,
                        eslint,
                        stylelint,
                        markdownlint,
                    ]

        steps:
            - name: Check out code
              uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

            - name: Setup Environment
              uses: ./.github/actions/setup-environment

            - name: Run Prettier
              if: matrix.tool == 'prettier'
              shell: bash
              run: |
                  set -e
                  timeout 60s bun prettier --write . --ignore-path .prettierignore --log-level warn || {
                  echo "Prettier failed or timed out, but continuing..."
                  exit 0
                  }

            - name: Run Rubocop
              if: matrix.tool == 'rubocop'
              shell: bash
              run: bundle exec rubocop -A

            - name: Run haml-lint
              if: matrix.tool == 'haml-lint'
              shell: bash
              run: bundle exec haml-lint --auto-correct app/ config/ lib/ --exclude 'vendor/**/*' --exclude '.codeql/**/*'

            - name: Run ESLint
              if: matrix.tool == 'eslint'
              shell: bash
              run: bun eslint . --fix

            - name: Run Stylelint
              if: matrix.tool == 'stylelint'
              shell: bash
              run: bun stylelint '**/*.scss' --fix

            - name: Run markdownlint
              if: matrix.tool == 'markdownlint'
              shell: bash
              run: bun markdownlint-cli2 '**/*.md' '!**/node_modules/**' '!**/vendor/**' '!**/tmp/**' '!**/log/**' '!**/coverage/**' '!**/storage/**' '!**/licenses/**' --fix --config .markdownlint-cli2.jsonc

    # Validation tools (runs in parallel)
    validation:
        name: ${{ matrix.tool }}
        runs-on: ubuntu-22.04
        if: always()
        permissions:
            contents: read
        strategy:
            fail-fast: false
            matrix:
                tool: [i18n-validation]

        steps:
            - name: Check out code
              uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

            - name: Setup Environment
              uses: ./.github/actions/setup-environment

            - name: Run i18n validation
              if: matrix.tool == 'i18n-validation'
              shell: bash
              run: ruby scripts/i18n_validate.rb

    # Security analysis (runs in parallel)
    security-analysis:
        name: ${{ matrix.tool }}
        runs-on: ubuntu-22.04
        if: always()
        permissions:
            contents: read
            security-events: write
        strategy:
            fail-fast: false
            matrix:
                tool: [
                        brakeman,
                        bundle-audit,
                        npm-audit,
                        # codeql-ruby,     # Temporarily disabled
                        # codeql-javascript, # Temporarily disabled
                    ]

        steps:
            - name: Check out code
              uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

            - name: Setup Environment
              uses: ./.github/actions/setup-environment
              env:
                  MATRIX_JOB: security-${{ matrix.tool }}

            - name: Run Security Analysis
              uses: ./.github/actions/security-analysis
              with:
                  tool: ${{ matrix.tool }}

            # Temporarily disabled CodeQL steps
            # - name: Run CodeQL Analysis (Ruby)
            #   if: matrix.tool == 'codeql-ruby'
            #   uses: ./.github/actions/codeql-analysis
            #   with:
            #       language: ruby

            # - name: Run CodeQL Analysis (JavaScript)
            #   if: matrix.tool == 'codeql-javascript'
            #   uses: ./.github/actions/codeql-analysis
            #   with:
            #       language: javascript-typescript

    # Code quality analysis (runs in parallel)
    code-quality:
        name: ${{ matrix.tool }}
        runs-on: ubuntu-22.04
        if: always()
        permissions:
            contents: read
        strategy:
            fail-fast: false
            matrix:
                tool: [fasterer, coffeelint, typos]

        steps:
            - name: Check out code
              uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

            - name: Setup Environment
              uses: ./.github/actions/setup-environment
              env:
                  MATRIX_JOB: quality-${{ matrix.tool }}

            - name: Run Code Quality Analysis
              uses: ./.github/actions/code-quality
              with:
                  tool: ${{ matrix.tool }}

    # Testing (runs in parallel)
    # testing:
    #     name: ${{ matrix.test-suite }}
    #     runs-on: ubuntu-22.04
    #     if: always()
    #     permissions:
    #         contents: read
    #     env:
    #         TIDB_HOST: ${{ secrets.TIDB_HOST }}
    #         TIDB_USERNAME: ${{ secrets.TIDB_USERNAME }}
    #         TIDB_PASSWORD: ${{ secrets.TIDB_PASSWORD }}
    #     strategy:
    #         fail-fast: false
    #         matrix:
    #             test-suite: [jest, rails-test]

    #     steps:
    #         - name: Check out code
    #           uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

    #         - name: Setup Environment
    #           uses: ./.github/actions/setup-environment
    #           env:
    #               MATRIX_JOB: test-${{ matrix.test-suite }}

    #         - name: Run Tests
    #           uses: ./.github/actions/run-tests
    #           with:
    #               test-suite: ${{ matrix.test-suite }}

    # Build and deployment (only runs on main branch and after quality checks pass)
    build-push:
        name: Build & Deploy
        runs-on: ubuntu-22.04
        permissions:
            contents: read
            packages: write
        needs: [formatting, validation, security-analysis, code-quality] # removed testing
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'

        steps:
            - name: Check out code
              uses: actions/checkout@v4

            - name: Bypass Cloudflare for Github Action
              uses: ./.github/actions/bypass-cloudflare
              with:
                  cf_zone_id: ${{ secrets.CLOUDFLARE_ZONE_ID }}
                  cf_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}

            - name: Log in to Quay
              uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
              with:
                  registry: quay.io
                  username: ${{ secrets.QUAY_USERNAME }}
                  password: ${{ secrets.QUAY_PASSWORD }}

            - name: Build Docker image
              run: |
                  docker build -t quay.io/georgebaskervil/libreverse:alpha .

            - name: Push to Quay.io
              run: |
                  docker push quay.io/georgebaskervil/libreverse:alpha

            - name: Trigger Coolify Redeploy
              run: |
                  curl -X GET "https://c.geor.me/api/v1/deploy?uuid=p4wg4ssgokg08s0wkk4cw0sk&force=false" \
                  -H "Content-Type: application/json" \
                  -H "authorization: Bearer ${{ secrets.COOLIFY_API_TOKEN }}"
