// Glass Effect Mixins and Base Styles
// ===================================
// Reusable mixins for applying glass effects to any component

// Base glass appearance mixin
@mixin glass-base(
    $background: rgba(255, 255, 255, 0.1),
    $border: rgba(255, 255, 255, 0.2),
    $blur: 10px
) {
    background: $background;
    backdrop-filter: blur($blur);
    box-shadow: 0 25px 50px rgb(0 0 0 / 25%);
}

// Glass button mixin - updated for very thin sidebar design
@mixin glass-button($size: 24px, $border-radius: 4px) {
    @include glass-base;

    width: $size;
    height: $size;
    min-width: $size;
    min-height: $size;
    max-width: $size;
    max-height: $size;
    border-radius: $border-radius;
    display: flex;
    align-items: center;
    justify-content: center;
    transition:
        transform 0.1s ease,
        opacity 300ms ease-out;
    flex-shrink: 0;
    position: relative;
    cursor: pointer;

    &:active:not(.disabled) {
        transform: scale(0.97);
    }
}

// Glass container mixin
@mixin glass-container() {
    @include glass-base;

    display: flex;
    flex-direction: column;
    position: relative;
    overflow: hidden;
}

// Glass card mixin
@mixin glass-card($border-radius: 15px, $padding: 20px) {
    @include glass-base(rgba(255, 255, 255, 0.08), rgba(255, 255, 255, 0.15));

    border-radius: $border-radius;
    padding: $padding;
    transition:
        transform 0.2s ease,
        box-shadow 0.2s ease;

    &:hover {
        box-shadow: 0 35px 60px rgb(0 0 0 / 30%);
    }
}

// Glass navigation mixin
@mixin glass-nav($direction: row, $gap: 8px) {
    @include glass-container;

    flex-direction: $direction;
    gap: $gap;
    align-items: center;

    @if $direction == column {
        justify-content: space-between;
    } @else {
        justify-content: center;
    }
}

// Glass sidebar mixin - updated for very thin design
@mixin glass-sidebar($width: 32px, $corner-rounding: right) {
    @include glass-container;

    width: $width;
    position: fixed;
    top: 50%;
    left: 0;
    transform: translateY(-50%);
    z-index: 5;
    height: 80vh;

    @if $corner-rounding == right {
        border-radius: 0
            var(--sidebar-border-radius)
            var(--sidebar-border-radius)
            0; // Only round corners away from screen edge
    } @else if $corner-rounding == left {
        border-radius: var(--sidebar-border-radius)
            0
            0
            var(
                --sidebar-border-radius
            ); // Only round corners away from screen edge
    }
}

// Glass drawer mixin
@mixin glass-drawer(
    $width: 350px,
    $height: 60px,
    $expanded-height: 600px,
    $corner-rounding: top
) {
    @include glass-base(
        rgba(255, 255, 255, 0.1),
        rgba(255, 255, 255, 0.2),
        15px
    );

    position: fixed;
    right: 0;
    bottom: 0;
    width: $width;
    height: $height;
    z-index: 3;
    transition:
        height 0.3s ease,
        background 0.3s ease,
        backdrop-filter 0.3s ease;
    overflow: hidden;

    @if $corner-rounding == top {
        border-radius: 20px
            20px
            0
            0; // Only round corners away from screen edge
    } @else if $corner-rounding == bottom {
        border-radius: 0
            0
            20px
            20px; // Only round corners away from screen edge
    } @else if $corner-rounding == left {
        border-radius: 20px
            0
            0
            20px; // Only round corners away from screen edge
    } @else if $corner-rounding == right {
        border-radius: 0
            20px
            20px
            0; // Only round corners away from screen edge
    } @else if $corner-rounding == all {
        border-radius: 20px;
    }

    &.expanded {
        height: $expanded-height;
    }

    .drawer-header {
        background: rgb(255 255 255 / 5%);
        backdrop-filter: blur(5px);
        transition: all 0.3s ease;
    }

    .drawer-contents {
        background: rgb(255 255 255 / 2%);
        backdrop-filter: blur(5px);
        transition: all 0.3s ease;
        height: 0;
        overflow: hidden;

        &.expanded {
            height: calc(#{$expanded-height} - #{$height});
        }
    }

    .drawer-toggle {
        @include glass-button(60px, 10px);

        background: rgb(255 255 255 / 10%);

        &:hover {
            background: rgb(255 255 255 / 15%);
        }
    }

    @media screen and (width <= 450px) {
        right: auto;
        left: 50%;
        transform: translateX(-50%);
        width: 90%;
        max-width: $width;
    }
}

// Native content styling to match glass during loading
@mixin native-glass-button($size: 40px, $border-radius: 20px) {
    @include glass-button($size, $border-radius);

    text-decoration: none;

    img,
    svg {
        width: 24px;
        height: 24px;
        display: block;
        flex-shrink: 0;
    }
}

// Disabled state mixin
@mixin glass-disabled() {
    opacity: 0.6;
    cursor: default;
    filter: grayscale(0.5);

    &.shake {
        animation: glass-shake 0.75s ease-in-out infinite;
        will-change: transform;
    }
}

// Glass animations
@keyframes glass-shake {
    0%,
    100% {
        transform: rotate(0deg);
    }

    25% {
        transform: rotate(2deg);
    }

    75% {
        transform: rotate(-2deg);
    }
}

@keyframes glass-fade-in {
    from {
        opacity: 0;
        transform: scale(0.95);
    }

    to {
        opacity: 1;
        transform: scale(1);
    }
}

@keyframes glass-fade-out {
    from {
        opacity: 1;
        transform: scale(1);
    }

    to {
        opacity: 0;
        transform: scale(0.95);
    }
}

// Responsive glass mixin
@mixin glass-responsive(
    $breakpoints: (
        small: 40px,
        medium: 60px,
        large: 80px,
    )
) {
    @each $size, $width in $breakpoints {
        @if $size == small {
            @media (width <= 600px) {
                width: $width;
            }
        } @else if $size == medium {
            @media (width >= 601px) and (width <= 1500px) {
                width: $width;
            }
        } @else if $size == large {
            @media (width >= 1501px) {
                width: $width;
            }
        }
    }
}

// Native drawer content styling to match glass during loading
@mixin native-drawer-content() {
    .drawer-content-container,
    .drawer-content {
        background: rgb(255 255 255 / 5%);
        backdrop-filter: blur(10px);
        border-radius: 10px;
        transition:
            opacity 300ms ease-out,
            background 300ms ease;
        padding: 16px;
        margin: 8px;
    }

    .drawer-header {
        background: rgb(255 255 255 / 8%);
        backdrop-filter: blur(8px);
        padding: 12px 16px;

        .drawer-title {
            color: rgb(255 255 255 / 90%);
            text-shadow: 0 1px 2px rgb(0 0 0 / 30%);
        }
    }
}

/* Glass overlay positioning - base rule */
.glass-overlay {
    position: absolute;
    inset: 0;
    z-index: 0;
    pointer-events: none;
    border-radius: inherit;

    canvas {
        width: 100%;
        height: 100%;
        pointer-events: none;
    }
}

/* Base glass component styling */
.glass-component {
    @include glass-container;

    position: relative;
    overflow: hidden;

    /* Default glass-like appearance that works without JavaScript */
    background: linear-gradient(
        135deg,
        rgb(255 255 255 / 10%) 0%,
        rgb(255 255 255 / 5%) 100%
    );
    backdrop-filter: blur(10px) saturate(1.2);
    border: 1px solid rgb(255 255 255 / 15%);
    border-radius: 15px;
    box-shadow:
        0 8px 32px rgb(0 0 0 / 10%),
        inset 0 1px 0 rgb(255 255 255 / 10%);

    /* Smooth transitions between states */
    transition: all 0.3s ease;

    &.glass-card {
        @include glass-card;

        border-radius: var(--glass-border-radius, 12px);
        padding: 20px;
    }

    &.glass-nav {
        @include glass-nav;

        border-radius: var(--glass-border-radius, 15px);
    }

    &.glass-button {
        @include glass-button;

        border-radius: var(--glass-border-radius, 6px);
        padding: 8px 16px; // Smaller padding for square design
        cursor: pointer;

        &:hover {
            background: linear-gradient(
                135deg,
                rgb(255 255 255 / 15%) 0%,
                rgb(255 255 255 / 8%) 100%
            );
            box-shadow:
                0 16px 48px rgb(0 0 0 / 20%),
                inset 0 1px 0 rgb(255 255 255 / 15%);
        }
    }

    &.glass-sidebar {
        @include glass-sidebar;

        border-radius: 0 var(--sidebar-border-radius)
            var(--sidebar-border-radius) 0 !important;
        border-left: none;
    }

    &.glass-drawer {
        @include glass-drawer;

        border-radius: var(--glass-border-radius, 20px)
            var(--glass-border-radius, 20px) 0 0;
    }

    &.glass-loading {
        opacity: 0.9;

        &::after {
            content: "";
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(
                90deg,
                transparent,
                rgb(255 255 255 / 20%),
                transparent
            );
            animation: glass-loading-shimmer 1.5s infinite;
            z-index: 2;
        }
    }

    &.glass-enhanced {
        /* Enhanced state - let WebGL take over */
        background: transparent;
        backdrop-filter: none;
        border: none;
        box-shadow: none;
    }

    &.glass-fallback {
        /* Fallback state - enhanced CSS glass effect */
        background: linear-gradient(
            135deg,
            rgb(255 255 255 / 12%) 0%,
            rgb(255 255 255 / 6%) 100%
        );
        backdrop-filter: blur(15px) saturate(1.5);
        border: 1px solid rgb(255 255 255 / 18%);
        box-shadow:
            0 12px 40px rgb(0 0 0 / 15%),
            inset 0 1px 0 rgb(255 255 255 / 12%),
            inset 0 -1px 0 rgb(0 0 0 / 5%);
    }
}

/* Specific glass overlay states and adjustments */
.glass-component.glass-loading .glass-overlay {
    opacity: 0;
    transition: opacity 0.3s ease;
}

.glass-component.glass-enhanced .glass-overlay {
    opacity: 1;
}

.glass-component.glass-sidebar.glass-enhanced .glass-overlay {
    border-radius: 0 var(--glass-border-radius, 12px)
        var(--glass-border-radius, 12px) 0;
}

.glass-component.glass-drawer.glass-enhanced .glass-overlay {
    border-radius: var(--glass-border-radius, 20px)
        var(--glass-border-radius, 20px) 0 0;
}

.glass-button-base {
    @include glass-button;

    &.disabled {
        @include glass-disabled;
    }
}

// Component-specific content containers
.nav-contents,
.card-contents,
.button-contents,
.drawer-contents {
    display: flex;
    flex-direction: column;
    height: 100%;
    box-sizing: border-box;

    // Style native elements to match glass during loading
    a,
    button {
        @include native-glass-button;

        margin: 4px auto;

        &.current,
        &.disabled {
            @include glass-disabled;
        }
    }
}

// Nav-specific adjustments
.nav-contents {
    flex-direction: row;
    justify-content: center;
    align-items: center;
    gap: 8px;
    padding: 8px 16px;
}

// Card-specific adjustments
.card-contents {
    padding: 20px;

    a,
    button {
        width: auto;
        min-width: 120px;
        border-radius: 25px;
        padding: 8px 16px;
    }
}

// Button-specific adjustments
.button-contents {
    padding: 0;

    a,
    button {
        width: 100%;
        height: 100%;
        border-radius: inherit;
        margin: 0;
    }
}

// Drawer-specific adjustments
.drawer-contents {
    height: 0;
    overflow: hidden;
    transition: height 0.3s ease;

    @include native-drawer-content;

    &.expanded {
        height: auto;
    }
}

/* Content positioning above glass */
.glass-component > *:not(.glass-overlay) {
    position: relative;
    z-index: 1;
}

/* Dark theme adjustments */
[data-theme="dark"] .glass-component {
    background: linear-gradient(
        135deg,
        rgb(0 0 0 / 30%) 0%,
        rgb(0 0 0 / 15%) 100%
    );
    border: 1px solid rgb(255 255 255 / 10%);
    box-shadow:
        0 8px 32px rgb(0 0 0 / 30%),
        inset 0 1px 0 rgb(255 255 255 / 8%);

    &.glass-fallback {
        background: linear-gradient(
            135deg,
            rgb(0 0 0 / 40%) 0%,
            rgb(0 0 0 / 20%) 100%
        );
        border: 1px solid rgb(255 255 255 / 12%);
        box-shadow:
            0 12px 40px rgb(0 0 0 / 40%),
            inset 0 1px 0 rgb(255 255 255 / 10%);
    }
}

/* Responsive adjustments */
@media (width <= 768px) {
    .glass-component {
        backdrop-filter: blur(8px) saturate(1.1);

        &.glass-fallback {
            backdrop-filter: blur(12px) saturate(1.3);
        }
    }
}

/* Reduce motion for accessibility */
@media (prefers-reduced-motion: reduce) {
    .glass-component {
        transition: none;
    }

    .glass-overlay {
        transition: none;
    }
}

/* High contrast mode adjustments */
@media (prefers-contrast: high) {
    .glass-component {
        border: 2px solid rgb(255 255 255 / 50%);
        backdrop-filter: none;
        background: rgb(0 0 0 / 80%);

        &.glass-fallback {
            border: 2px solid rgb(255 255 255 / 70%);
            background: rgb(0 0 0 / 90%);
        }
    }
}

/* Enhanced hover states for interactive elements */
.glass-component.glass-nav .nav-item,
.glass-component.glass-sidebar .sidebar-link {
    transition: all 0.2s ease;

    &:hover {
        // Remove background effects, keeping only subtle shadow
        box-shadow: 0 0 0 1px rgb(255 255 255 / 10%);
    }

    &:active {
        // Remove background effects, keeping only subtle shadow
        box-shadow: 0 0 0 1px rgb(255 255 255 / 5%);
    }
}

@keyframes glass-loading-shimmer {
    0% {
        left: -100%;
    }

    100% {
        left: 100%;
    }
}
